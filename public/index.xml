<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deploy Data Science</title>
    <link>https://www.deploydatascience.com/</link>
    <description>Recent content on Deploy Data Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright notice</copyright>
    <lastBuildDate>Thu, 27 May 2021 11:39:56 +0000</lastBuildDate><atom:link href="https://www.deploydatascience.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intro to PyTorch for Deep Learning</title>
      <link>https://www.deploydatascience.com/posts/intro-to-pytorch-for-deep-learning/</link>
      <pubDate>Thu, 27 May 2021 11:39:56 +0000</pubDate>
      
      <guid>https://www.deploydatascience.com/posts/intro-to-pytorch-for-deep-learning/</guid>
      <description>PyTorch Pytorch is an open source machine learning framework that accelerates the path from research prototyping to production deployment.
Regression Problem Example Boston Housing Dataset I have used the Boston housing dataset as it is one of the basic and beginner friendly dataset on Kaggle
Python Implementation The implementation creates a simple neural network using pytorch and compares with a baseline linear regression model.
Learnings Some key lessons learnt are to start with simple datasets and compare with baseline model to see the difference of using a non linear type model.</description>
    </item>
    
    <item>
      <title>An Open Source Customer Data Integration Solution</title>
      <link>https://www.deploydatascience.com/posts/data-integration-solution/</link>
      <pubDate>Wed, 24 Mar 2021 11:39:56 +0000</pubDate>
      
      <guid>https://www.deploydatascience.com/posts/data-integration-solution/</guid>
      <description>Customer Data Integration The first step even before you can begin to apply data science to a problem consists of loading customer data into your system. Although, trivial when you are doing a one off batch load/read from files or databases. It can quickly become a non-trivial task when data updates often, leading to many data refreshes.
To resolve this problem, data science systems use what are known as data loader/integration platforms.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.deploydatascience.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.deploydatascience.com/about/</guid>
      <description>Hi there, Welcome! to Deploy Data Science, a blog for all things data science and ML ops.
Created by Harshal, for ML and data science enthusiasts who would like to go beyond the prototype solutions and learn how to deploy data science from scratch into an end-to-end solutions.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://www.deploydatascience.com/resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.deploydatascience.com/resources/</guid>
      <description>Awesome List of Data Science Resources Data Engineering
Playlist of Awesome Data Engineering Videos Machine Learning
API Flask
https://github.com/exleym/Flask-Filter Filtering library directly on top of flask Similar libs: https://github.com/juliotrigo/sqlalchemy-filters https://github.com/gorilla-co/odata-query https://github.com/rochacbruno/dynaconf/ Configuration management for Flask in Production environments DevOps Nginx
https://github.com/digitalocean/nginxconfig.io NGINX config generator on steroids. Documentation
docusaurus https://docusaurus.io/ APIs
Hasura - Hasura gives you instant GraphQL &amp;amp; REST APIs on new &amp;amp; existing data sources. </description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://www.deploydatascience.com/tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.deploydatascience.com/tags/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
